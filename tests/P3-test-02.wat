(module
(memory (export "memory") 10)
(global $free_mem (mut i32) (i32.const 0))
(func $get_length (param $str i32) (result i32) 
  (local $length i32)
  (local $current i32)
  (block $fun_exit1 (result i32)
    (local.set $length (i32.const 0))
    (block $exit1
    (loop $loop1
      (local.get $str)
      (local.get $length)
      (i32.add)
      (i32.load8_u) ;; access the character
       (local.set $current)

      (local.get $current)
      (i32.eqz) ;; check if the character is null terminator
      (br_if $exit1)
      (local.get $length)
      (i32.const 1)
      (i32.add) ;; add 1 to the length of a string
      (local.set $length)
      (br $loop1)
    )
    )
  (local.get $length)
  )
)
(export "get_length" (func $get_length))
(func $add_strings (param $str1 i32) (param $str2 i32) (result i32)
  (local $old_free_mem i32)
  (local $count i32)
  (local $current i32)
  (local $i i32)
  (global.get $free_mem)
  (local.set $old_free_mem)
  (i32.const 0)
  (local.set $count)
    (i32.const 0)
    (local.set $i)
  (block $fun_exit1 (result i32)
    (block $exit1
      (loop $loop1
        (local.get $str1)
        (local.get $count)
        (i32.add)
        (i32.load8_u)
        (local.set $current)
        (local.get $current)
        (i32.eqz)
        (br_if $exit1)
        (local.get $old_free_mem)
        (local.get $count)
        (i32.add)
        (local.get $current)
        (i32.store8)
        (local.get $count)
        (i32.const 1)
        (i32.add)
        (local.set $count)
        (br $loop1)
      )
    )
    (block $exit2
      (loop $loop2
        (local.get $str2)
        (local.get $i)
        (i32.add)
        (i32.load8_u)
        (local.set $current)
        (local.get $current)
        (i32.eqz)
        (br_if $exit2)
        (local.get $old_free_mem)
        (local.get $count)
        (i32.add)
        (local.get $current)
        (i32.store8)
        (local.get $count)
        (i32.const 1)
        (i32.add)
        (local.set $count)
        (local.get $i)
        (i32.const 1)
        (i32.add)
        (local.set $i)
        (br $loop2)
      )
    )
    (local.get $old_free_mem)
    (local.get $count)
    (i32.add)
    (i32.const 0)
    (i32.store8)
    (local.get $old_free_mem)
    (local.get $count)
    (i32.add)
    (i32.const 1)
    (i32.add)
    (global.set $free_mem)
    (local.get $old_free_mem)
  )
)
(export "add_strings" (func $add_strings))
(func $char_to_string (param $char i32) (result i32)
  (local $address i32)
  ;; Allocate memory for the string
  (global.get $free_mem)
  (local.set $address)
  ;; Store the char as a single-character string
  (local.get $address)
  (local.get $char)
  (i32.store8)
  ;; Null-terminate the string
  (local.get $address)
  (i32.const 1)
  (i32.add)
  (i32.const 0)
  (i32.store8)
  ;; Update free_mem
  (local.get $address)
  (i32.const 2)
  (i32.add)
  (global.set $free_mem)
  ;; Return the address of the string
  (local.get $address)
)
(export "char_to_string" (func $char_to_string))
(func $pad_char (param $repeat i32) (param $char i32) (result i32)
  (local $char_str i32)
  (local $result i32)
  (local $i i32)
    (block $empty_string_block
      (local.get $repeat)
      (i32.eqz)
      (if
        (then
          (global.get $free_mem)
          (i32.const 0)
          (i32.store8)
          (global.get $free_mem)
          (i32.const 1)
          (i32.add)
          (global.set $free_mem)
          (global.get $free_mem)
          (return)
        )
      )
    )

    ;; Convert char to string
    (local.get $char)
    (call $char_to_string)
    (local.set $char_str)

    (local.get $char_str)
    (local.set $result)

    (local.set $i (i32.const 1))
    (block $exit_block
      (loop $loop
        ;; Break if $i >= $repeat
        (local.get $i)
        (local.get $repeat)
        (i32.ge_u)
        (br_if $exit_block)

        ;; Concatenate $result with $char_str
        (local.get $result)
        (local.get $char_str)
        (call $add_strings)
        (local.set $result) ;; Update result after concatenation

        ;; Increment $i
        (local.get $i)
        (i32.const 1)
        (i32.add)
        (local.set $i)

        ;; Repeat the loop
        (br $loop)
      )
    )

    ;; Return the final string address
    (local.get $result)
  )

  (export "pad_char" (func $pad_char))
(func $Echo (param $var0 i32) (result i32)
(block $fun_exit1 (result i32)
(local.get $var0)
)   ;; end of function block.
)   ;; end of function definition
(export "Echo" (func $Echo))
)
